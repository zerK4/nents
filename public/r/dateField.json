{
  "name": "dateField",
  "type": "registry:component",
  "registryDependencies": [
    "calendar"
  ],
  "dependencies": [
    "react-hook-form",
    "react"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "import {\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { cn } from \"@/lib/utils\";\nimport { DateTimePicker } from \"@/components/dateTimePicker\";\nimport React from \"react\";\nimport { SharedFormFieldProps } from \"../form\";\n\nfunction DateField({\n  fieldName,\n  control,\n  config,\n  label,\n  isOptional,\n}: SharedFormFieldProps<\"date\" | \"datetime-local\">) {\n  return (\n    <FormField\n      key={fieldName}\n      control={control}\n      rules={config.rules}\n      name={fieldName}\n      render={({ field }) => (\n        <FormItem className={cn(\"flex flex-col\", config.className)}>\n          <FormLabel className={config.labelClassName}>\n            {label}\n            {isOptional && (\n              <span className='ml-1 text-muted-foreground'>(Optional)</span>\n            )}\n          </FormLabel>\n          <FormControl>\n            <DateTimePicker\n              cb={(date) => field.onChange(date)}\n              defaultDate={field.value}\n              disabled={{\n                date: new Date(),\n                operator: \"<=\",\n              }}\n            />\n          </FormControl>\n          {config.description && (\n            <FormDescription>{config.description}</FormDescription>\n          )}\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  );\n}\n\nexport default DateField;\n",
      "path": "components/forms/sharedForm/components/dateField.tsx",
      "target": "components/forms/sharedForm/components/dateField.tsx"
    },
    {
      "type": "registry:component",
      "content": "\"use client\";\nimport * as React from \"react\";\nimport { format } from \"date-fns\";\nimport { enUS } from \"date-fns/locale\";\nimport { Calendar as CalendarIcon } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\nexport function DateTimePicker({\n  cb,\n  defaultDate,\n  disabled = {\n    date: new Date(),\n    operator: \">\",\n  },\n}: {\n  cb: (date: Date | undefined) => void;\n  defaultDate?: Date;\n  disabled?: {\n    date: Date;\n    operator: \">\" | \"<\" | \">=\" | \"<=\";\n  };\n}) {\n  const [date, setDate] = React.useState<Date | undefined>(defaultDate);\n  const [time, setTime] = React.useState(() => {\n    if (defaultDate) {\n      return format(defaultDate, \"HH:mm\");\n    }\n    return \"00:00\";\n  });\n  const [isOpen, setIsOpen] = React.useState(false);\n  const scrollAreaRef = React.useRef<HTMLDivElement>(null);\n  const timeSlotRefs = React.useRef<(HTMLDivElement | null)[]>([]);\n\n  React.useEffect(() => {\n    if (date) {\n      const [hours, minutes] = time.split(\":\");\n      const updatedDate = new Date(date);\n      updatedDate.setHours(parseInt(hours), parseInt(minutes));\n      cb(updatedDate);\n    } else {\n      cb(undefined);\n    }\n  }, [date, time]);\n\n  const generateTimeSlots = () => {\n    const slots: string[] = [];\n    for (let i = 0; i < 96; i++) {\n      const hour = Math.floor(i / 4)\n        .toString()\n        .padStart(2, \"0\");\n      const minute = ((i % 4) * 15).toString().padStart(2, \"0\");\n      const timeValue = `${hour}:${minute}`;\n      slots.push(timeValue);\n    }\n    return slots;\n  };\n\n  return (\n    <Popover open={isOpen} onOpenChange={setIsOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant={\"outline\"}\n          className={cn(\n            \"w-full justify-start gap-2 flex text-left font-normal\",\n            !date && \"text-muted-foreground\"\n          )}\n        >\n          <CalendarIcon className='w-4 h-4' />\n          {date\n            ? `${format(date, \"PPP\", { locale: enUS })}, ${time}`\n            : \"Select a date\"}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className='flex w-auto p-0 h-fit z-[100000]'>\n        <Calendar\n          mode='single'\n          locale={enUS}\n          selected={date}\n          disabled={(d) => {\n            const isDisabled = (d: Date) => {\n              const { operator, date } = disabled;\n\n              switch (operator) {\n                case \">\":\n                  return d > date;\n                case \"<\":\n                  return d < date;\n                case \">=\":\n                  return d >= date;\n                case \"<=\":\n                  return d <= date;\n                default:\n                  return false;\n              }\n            };\n\n            return isDisabled(d);\n          }}\n          onSelect={(selectedDate) => {\n            setDate(selectedDate);\n          }}\n          initialFocus\n        />\n        <div className='border-t max-h-[20rem] p-2'>\n          <ScrollArea ref={scrollAreaRef} className='w-full h-full p-2 text-sm'>\n            <div className='flex flex-col space-y-1'>\n              {generateTimeSlots().map((timeSlot, index) => (\n                <div\n                  ref={(el) => {\n                    timeSlotRefs.current[index] = el;\n                    if (time === timeSlot && el) {\n                      el.scrollIntoView({\n                        behavior: \"smooth\",\n                        block: \"nearest\",\n                      });\n                    }\n                  }}\n                  key={timeSlot}\n                  className={cn(\n                    \"px-2 py-1 rounded-sm cursor-pointer hover:bg-accent hover:text-accent-foreground\",\n                    time === timeSlot && \"bg-primary text-primary-foreground\"\n                  )}\n                  onClick={() => {\n                    setTime(timeSlot);\n                  }}\n                >\n                  {timeSlot}\n                </div>\n              ))}\n            </div>\n          </ScrollArea>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "path": "components/dateTimePicker.tsx",
      "target": "components/dateTimePicker.tsx"
    }
  ]
}