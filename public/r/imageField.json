{
  "name": "imageField",
  "type": "registry:component",
  "registryDependencies": [
    "input"
  ],
  "dependencies": [
    "react-hook-form",
    "react"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "import { Button } from \"@/components/ui/button\";\nimport {\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { cn } from \"@/lib/utils\";\nimport { ImagePlus, Loader2Icon, XIcon } from \"lucide-react\";\nimport Image from \"next/image\";\nimport { useState } from \"react\";\nimport { SharedFormFieldProps } from \"../form\";\n\nfunction ImageField({\n  fieldName,\n  control,\n  config,\n  label,\n  isOptional,\n}: SharedFormFieldProps<\"image\">) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDragging, setIsDragging] = useState(false);\n\n  return (\n    <FormField\n      key={fieldName}\n      control={control}\n      rules={config.rules}\n      name={fieldName}\n      render={({ field }) => {\n        return (\n          <FormItem\n            className={cn(\"flex flex-col items-center\", config.className)}\n          >\n            <FormLabel className={cn(config.labelClassName)}>\n              {label}\n              {isOptional && (\n                <span className='ml-1 text-muted-foreground'>(Optional)</span>\n              )}\n            </FormLabel>\n            <FormControl>\n              <div className='flex border-2 border-dashed rounded-lg flex-col gap-4 relative'>\n                <div\n                  className={cn(\n                    \"group rounded-lg overflow-hidden\",\n                    \"transition-colors duration-200 ease-in-out\",\n                    isDragging\n                      ? \"border-primary bg-primary/5\"\n                      : \"border-muted-foreground/25\",\n                    \"hover:border-primary hover:bg-primary/5\",\n                    config.uploadAreaClassName\n                  )}\n                  onDragOver={(e) => {\n                    e.preventDefault();\n                    setIsDragging(true);\n                  }}\n                  onDragLeave={() => setIsDragging(false)}\n                  onDrop={(e) => {\n                    e.preventDefault();\n                    setIsDragging(false);\n                    const file = e.dataTransfer.files?.[0];\n                    if (file && file.type.startsWith(\"image/\")) {\n                      setIsLoading(true);\n                      const previewUrl = URL.createObjectURL(file);\n                      field.onChange({ file, previewUrl });\n                    }\n                  }}\n                >\n                  <Input\n                    type='file'\n                    accept='image/*'\n                    className='sr-only'\n                    onChange={(e) => {\n                      const file = e.target.files?.[0];\n                      if (file) {\n                        setIsLoading(true);\n                        const previewUrl = URL.createObjectURL(file);\n                        field.onChange({ file, previewUrl });\n                      }\n                    }}\n                    id={`${fieldName}-upload`}\n                  />\n                  <label\n                    htmlFor={`${fieldName}-upload`}\n                    className={cn(\n                      \"flex flex-col items-center justify-center gap-2\",\n                      \"cursor-pointer w-full p-4\",\n                      \"text-muted-foreground\",\n                      config.inputClassName\n                    )}\n                  >\n                    {!field.value ? (\n                      <>\n                        <ImagePlus className='w-10 h-10' />\n                        <div className='text-center'>\n                          <p className='font-medium'>Click to upload</p>\n                          <p className='text-sm'>or drag and drop</p>\n                        </div>\n                        <p className='text-xs'>PNG, JPG, GIF up to 10MB</p>\n                      </>\n                    ) : (\n                      <div className='w-40 h-40'>\n                        {isLoading && (\n                          <div className='absolute inset-0 flex items-center justify-center bg-background/50 backdrop-blur-sm z-10'>\n                            <Loader2Icon className='h-8 w-8 animate-spin text-primary' />\n                          </div>\n                        )}\n                        <Image\n                          src={field.value.previewUrl}\n                          alt='Preview'\n                          fill\n                          className='object-contain rounded-lg'\n                          onLoad={() => {\n                            setIsLoading(false);\n                            if (config.onImageLoad) {\n                              config.onImageLoad(field.value);\n                            }\n                          }}\n                        />\n                        <Button\n                          type='button'\n                          variant='destructive'\n                          size='xsIcon'\n                          className='absolute -top-1 -right-1 z-20'\n                          onClick={(e) => {\n                            e.preventDefault();\n                            if (field.value?.previewUrl) {\n                              URL.revokeObjectURL(field.value.previewUrl);\n                            }\n                            field.onChange(null);\n                          }}\n                        >\n                          <XIcon className='h-4 w-4' />\n                        </Button>\n                      </div>\n                    )}\n                  </label>\n                </div>\n              </div>\n            </FormControl>\n            {config.description && (\n              <FormDescription>{config.description}</FormDescription>\n            )}\n            <FormMessage />\n          </FormItem>\n        );\n      }}\n    />\n  );\n}\n\nexport default ImageField;\n",
      "path": "components/forms/sharedForm/components/imageField.tsx",
      "target": "components/forms/sharedForm/components/imageField.tsx"
    }
  ]
}