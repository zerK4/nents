{
  "name": "sharedFormEmpty",
  "type": "registry:component",
  "registryDependencies": [
    "button",
    "form",
    "separator"
  ],
  "dependencies": [
    "react-hook-form",
    "react",
    "zod"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Form } from \"@/components/ui/form\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { FieldConfig } from \"@/lib/schemaConfigs\";\nimport { magicRename } from \"@/lib/sharedFormUtils\";\nimport React from \"react\";\nimport { Control, SubmitHandler, UseFormReturn } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport BooleanField from \"./components/booleanField\";\nimport DateField from \"./components/dateField\";\nimport ImageField from \"./components/imageField\";\nimport NumberField from \"./components/numberField\";\nimport SelectField from \"./components/selectField\";\nimport TextField from \"./components/textField\";\nimport TextareaField from \"./components/textareaField\";\n\nexport type FieldConfigs = Record<string, FieldConfig>;\n\nexport type SharedFormFieldProps<T extends keyof FieldConfigs> = {\n  fieldName: string;\n  control: Control<any>;\n  config: FieldConfigs[T];\n  label: string;\n  isOptional?: boolean;\n  schema?: any;\n};\n\nconst renderField = <T extends z.ZodType<any, any>>(\n  index: number,\n  fieldName: string,\n  schema: T,\n  control: Control<any>,\n  fieldConfigs: FieldConfigs\n): React.ReactNode => {\n  const config = fieldConfigs[fieldName] || {};\n  const label = config.label || magicRename(fieldName);\n\n  // Check if the field should be hidden\n  if (config.hidden) {\n    return null;\n  }\n\n  // Determine if the field is optional\n  const isOptional =\n    schema instanceof z.ZodOptional ||\n    schema instanceof z.ZodNullable ||\n    schema instanceof z.ZodDefault ||\n    config.optional;\n\n  // Unwrap optional/nullable schemas\n  const baseSchema =\n    schema instanceof z.ZodOptional || schema instanceof z.ZodNullable\n      ? schema._def.innerType\n      : schema;\n\n  if (config.type === \"image\") {\n    return (\n      <ImageField\n        schema={baseSchema}\n        key={index}\n        fieldName={fieldName}\n        control={control}\n        config={config}\n        isOptional={isOptional}\n        label={label}\n      />\n    );\n  }\n\n  if (config.type === \"select\" || baseSchema instanceof z.ZodEnum) {\n    return (\n      <SelectField\n        key={index}\n        config={config}\n        isOptional={isOptional}\n        label={label}\n        fieldName={fieldName}\n        control={control}\n        schema={schema}\n      />\n    );\n  }\n\n  // Date handling for datetime schemas\n  if (baseSchema instanceof z.ZodDate) {\n    return (\n      <DateField\n        key={index}\n        config={config}\n        isOptional={isOptional}\n        label={label}\n        fieldName={fieldName}\n        control={control}\n        schema={baseSchema}\n      />\n    );\n  }\n\n  // String input\n  if (\n    baseSchema instanceof z.ZodString &&\n    config.type === \"text\" &&\n    config.textType !== \"huge\" &&\n    config.textType !== \"number\"\n  ) {\n    return (\n      <TextField\n        key={index}\n        fieldName={fieldName}\n        control={control}\n        config={config}\n        isOptional={isOptional}\n        label={label}\n        schema={baseSchema}\n      />\n    );\n  }\n\n  // String input\n  if (\n    baseSchema instanceof z.ZodString &&\n    config.type === \"text\" &&\n    config.textType === \"huge\"\n  ) {\n    return (\n      <TextareaField\n        key={index}\n        fieldName={fieldName}\n        control={control}\n        config={config}\n        isOptional={isOptional}\n        label={label}\n        schema={baseSchema}\n      />\n    );\n  }\n\n  // Number input\n  if (\n    baseSchema instanceof z.ZodNumber ||\n    config.type === \"number\" ||\n    (config.type === \"text\" && config.textType === \"number\")\n  ) {\n    return (\n      <NumberField\n        key={index}\n        config={config}\n        isOptional={isOptional}\n        label={label}\n        fieldName={fieldName}\n        control={control}\n        schema={baseSchema}\n      />\n    );\n  }\n\n  // Boolean (Checkbox)\n  if (baseSchema instanceof z.ZodBoolean) {\n    return (\n      <BooleanField\n        key={index}\n        config={config}\n        isOptional={isOptional}\n        label={label}\n        fieldName={fieldName}\n        control={control}\n        schema={baseSchema}\n      />\n    );\n  }\n\n  return null;\n};\n\ninterface UniversalFormProps<\n  T extends z.ZodObject<any> | z.ZodEffects<z.ZodObject<any>>\n> {\n  schema: T;\n  onSubmit: SubmitHandler<z.infer<T>>;\n  fieldConfigs?: FieldConfigs;\n  submitButtonText?: string;\n  formClassName?: string;\n  submitButtonClassName?: string;\n  form: UseFormReturn<z.infer<T>>;\n  showSeparator?: boolean;\n}\n\nfunction SharedForm<\n  T extends z.ZodObject<any> | z.ZodEffects<z.ZodObject<any>>\n>({\n  schema,\n  onSubmit,\n  fieldConfigs = {},\n  submitButtonText = \"Submit\",\n  formClassName = \"flex flex-col gap-4\",\n  submitButtonClassName,\n  form,\n  showSeparator = false,\n}: UniversalFormProps<T>) {\n  const schemaShape =\n    \"shape\" in schema ? schema.shape : schema._def.schema.shape;\n\n  return (\n    <Form {...form}>\n      <form\n        id={`shared-form-${schema._def.description}`}\n        onSubmit={form?.handleSubmit(onSubmit)}\n        className={formClassName}\n      >\n        {Object.keys(schemaShape).map((fieldName, index) => {\n          const fieldSchema = schemaShape[fieldName];\n          const config = fieldConfigs[fieldName] || {};\n\n          if (!config.hidden) {\n            return renderField<typeof fieldSchema>(\n              index,\n              fieldName,\n              fieldSchema,\n              form.control,\n              fieldConfigs\n            );\n          }\n\n          return null;\n        })}\n      </form>\n      {showSeparator && <Separator />}\n      <div className='flex justify-end'>\n        <Button\n          form={`shared-form-${schema._def.description}`}\n          type='submit'\n          className={submitButtonClassName}\n        >\n          {submitButtonText}\n        </Button>\n      </div>\n    </Form>\n  );\n}\n\nexport default SharedForm;\n",
      "path": "components/forms/sharedForm/form.tsx",
      "target": "components/forms/sharedForm/form.tsx"
    },
    {
      "type": "registry:component",
      "content": "import { z } from \"zod\";\n\ntype ZodTypeWithRefine = z.ZodObject<any> | z.ZodEffects<z.ZodObject<any>>;\n\nexport interface BaseConfig<T = any> {\n  label?: string;\n  placeholder?: string;\n  description?: string;\n  className?: string;\n  inputClassName?: string;\n  labelClassName?: string;\n  optional?: boolean;\n  hidden?: boolean;\n  default?: any;\n  onImageLoad?: (value: { file: File; previewUrl: string }) => void;\n  previewClassName?: string;\n  uploadAreaClassName?: string;\n  metadata?: T;\n  rules?: {\n    required?: {\n      value: boolean;\n      message: string;\n    };\n  };\n}\n\nexport type TextConfig = BaseConfig & {\n  type?: \"text\";\n  textType?: \"small\" | \"huge\" | \"number\" | \"password\";\n};\n\nexport type NumberConfig = BaseConfig & {\n  type?: \"number\";\n};\n\nexport type DateConfig = BaseConfig & {\n  type?: \"date\" | \"datetime-local\";\n};\n\nexport type SelectConfig = BaseConfig & {\n  type?: \"select\";\n  options?: { value: string | number; label: string }[];\n};\n\nexport type ImageConfig = BaseConfig & {\n  type?: \"image\";\n  onImageLoad?: (value: { file: File; previewUrl: string }) => void;\n  previewClassName?: string;\n  uploadAreaClassName?: string;\n};\n\nexport type FieldConfig =\n  | TextConfig\n  | NumberConfig\n  | DateConfig\n  | SelectConfig\n  | ImageConfig;\n\nexport function createFieldConfigs<T extends ZodTypeWithRefine>(\n  schema: T,\n  configs: {\n    [K in keyof z.infer<T>]?: FieldConfig;\n  }\n) {\n  return configs;\n}\n",
      "path": "lib/schemaConfigs.ts",
      "target": "lib/schemaConfigs.ts"
    },
    {
      "type": "registry:component",
      "content": "export const magicRename = (string: string) => {\n  const normalizedString = string\n    .replace(/([a-z0-9])([A-Z])/g, \"$1_$2\")\n    .toLowerCase();\n\n  return normalizedString\n    .split(\"_\")\n    .map((word, index) =>\n      index === 0 ? word.charAt(0).toUpperCase() + word.slice(1) : word\n    )\n    .join(\" \");\n};\n\nexport const generateRandomId = (): string => {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n};\n",
      "path": "lib/sharedFormUtils.ts",
      "target": "lib/sharedFormUtils.ts"
    }
  ]
}