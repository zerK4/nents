{
  "name": "multiStepForm",
  "type": "registry:component",
  "registryDependencies": [
    "button",
    "tooltip",
    "dialog",
    "sonner",
    "separator"
  ],
  "dependencies": [
    "react-hook-form",
    "framer-motion",
    "react",
    "animejs"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "import { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { Check, CircleXIcon, Loader2Icon } from \"lucide-react\";\nimport React, { useEffect, useState } from \"react\";\nimport { FieldValues, UseFormReturn } from \"react-hook-form\";\nimport { toast } from \"sonner\";\nimport CmdCtrlButton from \"../ui/cmdCtrlButton\";\n\nexport interface StepConfig<T extends FieldValues = any> {\n  title: string;\n  component?: React.ReactNode | null;\n  form?: UseFormReturn<T>;\n  schema?: any;\n}\n\nexport interface MultistepFormProps {\n  steps: StepConfig[];\n  onSubmit: (values: Record<string, any>) => Promise<void>;\n  title?: string;\n  header?: React.ReactNode;\n  isSuccess?: boolean;\n  isError?: boolean;\n  isPending?: boolean;\n  successMessage?: string;\n  errorMessage?: string;\n  loadingAnimation?: React.ReactNode;\n}\n\nconst loadingLocal = () => (\n  <div className='flex flex-col items-center'>\n    <Loader2Icon className='w-12 h-12 text-primary animate-spin' />\n    <p className='mt-4 text-lg text-muted-foreground'>Submitting...</p>\n  </div>\n);\n\nconst MultistepForm: React.FC<MultistepFormProps> = ({\n  steps,\n  onSubmit,\n  title,\n  header,\n  isSuccess = false,\n  isError = false,\n  isPending = false,\n  successMessage = \"Success!\",\n  errorMessage = \"Error!\",\n  loadingAnimation = loadingLocal(),\n}) => {\n  const [step, setStep] = useState(0);\n  const [currentValues, setCurrentValues] = useState<Record<string, any>>({});\n\n  const currentStep = steps[step];\n  const isFinalStep = step === steps.length - 1;\n  const isCreationStep = step === steps.length - 2;\n\n  const isCurrentStepValid =\n    currentStep?.schema?.safeParse(currentValues)?.success || false;\n\n  useEffect(() => {\n    const values = currentStep?.form?.watch() || {};\n    setCurrentValues(values);\n  }, [step, currentStep]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if ((e.metaKey || e.ctrlKey) && e.key === \"Enter\") {\n        if (!isCurrentStepValid) {\n          toast.error(\"Please fill in all required fields\", {\n            duration: 2000,\n          });\n\n          return;\n        }\n        if (step === steps.length - 2) handleSubmit();\n        else handleNext();\n      }\n    };\n\n    window.addEventListener(\"keydown\", handleKeyDown);\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, [isCurrentStepValid]);\n\n  const handleNext = () => setStep((prev) => prev + 1);\n  const handleBack = () => setStep((prev) => prev - 1);\n\n  const handleSubmit = async () => {\n    const allValues = steps\n      .filter((step) => step.form)\n      .reduce((acc, step) => {\n        acc[step.title.toLowerCase()] = step.form?.getValues();\n\n        return acc;\n      }, {} as Record<string, any>);\n\n    try {\n      await onSubmit(allValues);\n    } catch {\n    } finally {\n      handleNext();\n    }\n  };\n\n  const resetForms = () => {\n    steps.forEach((step) => step.form?.reset());\n    setStep(0);\n  };\n\n  return (\n    <div>\n      <div className='flex flex-col gap-4'>\n        {title ? (\n          <div className='p-4'>\n            <h2 className='text-2xl !p-0 !m-0 font-semibold'>{title}</h2>\n          </div>\n        ) : header ? (\n          header\n        ) : (\n          \"Multi step form\"\n        )}\n        <div className='flex items-center justify-between w-full p-6'>\n          <div className='flex items-center justify-between w-full'>\n            {steps.map((s, index) => (\n              <React.Fragment key={index}>\n                <div className='flex flex-col relative items-center gap-2'>\n                  <motion.div\n                    className={cn(\n                      \"w-8 h-8 rounded-full flex items-center justify-center\",\n                      \"border-2 transition-colors duration-200\",\n                      index <= step\n                        ? \"border-primary bg-primary text-primary-foreground\"\n                        : \"border-muted-foreground/25\"\n                    )}\n                    animate={{\n                      scale: index === step ? 1.1 : 1,\n                    }}\n                  >\n                    {index < step || (isFinalStep && isSuccess) ? (\n                      <Check className='w-4 h-4 text-green-500' />\n                    ) : (\n                      <span className='flex items-center justify-center'>\n                        {index + 1}\n                      </span>\n                    )}\n                  </motion.div>\n                  {index === step && (\n                    <motion.p\n                      key={`step-${index}`}\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      exit={{ opacity: 0 }}\n                      className='text-xs font-medium text-center mt-1 text-foreground absolute -top-8 whitespace-nowrap'\n                    >\n                      {s?.title ?? \"\"}\n                    </motion.p>\n                  )}\n                </div>\n                {index < steps.length - 1 && (\n                  <div className='flex-1 mx-2'>\n                    <div\n                      className={cn(\n                        \"h-[2px] w-full transition-colors duration-200\",\n                        index < step ? \"bg-primary\" : \"bg-muted-foreground/25\"\n                      )}\n                    />\n                  </div>\n                )}\n              </React.Fragment>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      <AnimatePresence mode='wait'>\n        <motion.div\n          key={step}\n          initial={{ opacity: 0, x: 10 }}\n          animate={{ opacity: 1, x: 0 }}\n          exit={{ opacity: 0, x: -10 }}\n          transition={{ duration: 0.2 }}\n          className=''\n        >\n          {!isFinalStep ? (\n            currentStep.component\n          ) : (\n            <div className='flex flex-col items-center justify-center h-64'>\n              {isPending ? (\n                loadingAnimation\n              ) : isSuccess ? (\n                <div className='flex flex-col items-center gap-4'>\n                  <Check className='text-lime-500 w-12 h-12' />\n                  <p className='text-lg text-muted-foreground'>\n                    {successMessage}\n                  </p>\n                  <div className='flex items-center gap-2'>\n                    <Button variant='ghost' onClick={resetForms}>\n                      Make another\n                    </Button>\n                  </div>\n                </div>\n              ) : (\n                isError && (\n                  <div className='flex flex-col items-center'>\n                    <CircleXIcon className='text-red-500 w-12 h-12' />\n                    <p className='mt-4 text-lg text-muted-foreground'>\n                      {errorMessage}\n                    </p>\n                  </div>\n                )\n              )}\n            </div>\n          )}\n\n          {!isFinalStep && (\n            <div className='flex justify-between pt-4'>\n              {step > 0 ? (\n                <Button variant='outline' onClick={handleBack}>\n                  Back\n                </Button>\n              ) : (\n                <div></div>\n              )}\n              <div className='flex items-center gap-4'>\n                <CmdCtrlButton\n                  message={isCreationStep ? undefined : \"for next step\"}\n                />\n                <Button\n                  onClick={isCreationStep ? handleSubmit : handleNext}\n                  disabled={!isCurrentStepValid}\n                >\n                  {isCreationStep ? \"Submit\" : \"Next\"}\n                </Button>\n              </div>\n            </div>\n          )}\n        </motion.div>\n      </AnimatePresence>\n    </div>\n  );\n};\n\nexport default MultistepForm;\n",
      "path": "components/forms/multiStepForm.tsx",
      "target": "components/forms/multiStepForm.tsx"
    },
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport React, { useEffect, useState } from \"react\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nconst CmdCtrlButton = ({ message }: { message?: string }) => {\n  const [modifierKey, setModifierKey] = useState(\"ctrl\");\n\n  useEffect(() => {\n    const isMac = navigator.userAgent.toLowerCase().includes(\"mac\");\n    setModifierKey(isMac ? \"cmd\" : \"ctrl\");\n  }, []);\n\n  return (\n    <div className='flex items-center gap-4'>\n      <Tooltip>\n        <TooltipTrigger>\n          <span className='flex items-center gap-2 cursor-default'>\n            {modifierKey === \"cmd\" ? \"âŒ˜\" : \"^\"}\n            <span className='text-xs'>Enter</span>\n          </span>\n        </TooltipTrigger>\n        <TooltipContent>\n          Press {modifierKey} + Enter {message} to submit\n        </TooltipContent>\n      </Tooltip>\n    </div>\n  );\n};\n\nexport default CmdCtrlButton;\n",
      "path": "components/ui/cmdCtrlButton.tsx",
      "target": "components/ui/cmdCtrlButton.tsx"
    }
  ]
}