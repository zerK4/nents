{
  "name": "sharedForm",
  "type": "registry:component",
  "registryDependencies": [
    "button",
    "form",
    "separator"
  ],
  "dependencies": [
    "react-hook-form",
    "react",
    "zod"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Form } from \"@/components/ui/form\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { FieldConfig } from \"@/lib/schemaConfigs\";\nimport { magicRename } from \"@/lib/sharedFormUtils\";\nimport React from \"react\";\nimport { Control, SubmitHandler, UseFormReturn } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport BooleanField from \"./components/booleanField\";\nimport DateField from \"./components/dateField\";\nimport ImageField from \"./components/imageField\";\nimport NumberField from \"./components/numberField\";\nimport SelectField from \"./components/selectField\";\nimport TextField from \"./components/textField\";\nimport TextareaField from \"./components/textareaField\";\n\nexport type FieldConfigs = Record<string, FieldConfig>;\n\nexport type SharedFormFieldProps<T extends keyof FieldConfigs> = {\n  fieldName: string;\n  control: Control<any>;\n  config: FieldConfigs[T];\n  label: string;\n  isOptional?: boolean;\n  schema?: any;\n};\n\nconst renderField = <T extends z.ZodType<any, any>>(\n  index: number,\n  fieldName: string,\n  schema: T,\n  control: Control<any>,\n  fieldConfigs: FieldConfigs\n): React.ReactNode => {\n  const config = fieldConfigs[fieldName] || {};\n  const label = config.label || magicRename(fieldName);\n\n  // Check if the field should be hidden\n  if (config.hidden) {\n    return null;\n  }\n\n  // Determine if the field is optional\n  const isOptional =\n    schema instanceof z.ZodOptional ||\n    schema instanceof z.ZodNullable ||\n    schema instanceof z.ZodDefault ||\n    config.optional;\n\n  // Unwrap optional/nullable schemas\n  const baseSchema =\n    schema instanceof z.ZodOptional || schema instanceof z.ZodNullable\n      ? schema._def.innerType\n      : schema;\n\n  if (config.type === \"image\") {\n    return (\n      <ImageField\n        schema={baseSchema}\n        key={index}\n        fieldName={fieldName}\n        control={control}\n        config={config}\n        isOptional={isOptional}\n        label={label}\n      />\n    );\n  }\n\n  if (config.type === \"select\" || baseSchema instanceof z.ZodEnum) {\n    return (\n      <SelectField\n        key={index}\n        config={config}\n        isOptional={isOptional}\n        label={label}\n        fieldName={fieldName}\n        control={control}\n        schema={schema}\n      />\n    );\n  }\n\n  // Date handling for datetime schemas\n  if (baseSchema instanceof z.ZodDate) {\n    return (\n      <DateField\n        key={index}\n        config={config}\n        isOptional={isOptional}\n        label={label}\n        fieldName={fieldName}\n        control={control}\n        schema={baseSchema}\n      />\n    );\n  }\n\n  // String input\n  if (\n    baseSchema instanceof z.ZodString &&\n    config.type === \"text\" &&\n    config.textType !== \"huge\" &&\n    config.textType !== \"number\"\n  ) {\n    return (\n      <TextField\n        key={index}\n        fieldName={fieldName}\n        control={control}\n        config={config}\n        isOptional={isOptional}\n        label={label}\n        schema={baseSchema}\n      />\n    );\n  }\n\n  // String input\n  if (\n    baseSchema instanceof z.ZodString &&\n    config.type === \"text\" &&\n    config.textType === \"huge\"\n  ) {\n    return (\n      <TextareaField\n        key={index}\n        fieldName={fieldName}\n        control={control}\n        config={config}\n        isOptional={isOptional}\n        label={label}\n        schema={baseSchema}\n      />\n    );\n  }\n\n  // Number input\n  if (\n    baseSchema instanceof z.ZodNumber ||\n    config.type === \"number\" ||\n    (config.type === \"text\" && config.textType === \"number\")\n  ) {\n    return (\n      <NumberField\n        key={index}\n        config={config}\n        isOptional={isOptional}\n        label={label}\n        fieldName={fieldName}\n        control={control}\n        schema={baseSchema}\n      />\n    );\n  }\n\n  // Boolean (Checkbox)\n  if (baseSchema instanceof z.ZodBoolean) {\n    return (\n      <BooleanField\n        key={index}\n        config={config}\n        isOptional={isOptional}\n        label={label}\n        fieldName={fieldName}\n        control={control}\n        schema={baseSchema}\n      />\n    );\n  }\n\n  return null;\n};\n\ninterface UniversalFormProps<\n  T extends z.ZodObject<any> | z.ZodEffects<z.ZodObject<any>>\n> {\n  schema: T;\n  onSubmit: SubmitHandler<z.infer<T>>;\n  fieldConfigs?: FieldConfigs;\n  submitButtonText?: string;\n  formClassName?: string;\n  submitButtonClassName?: string;\n  form: UseFormReturn<z.infer<T>>;\n  showSeparator?: boolean;\n}\n\nfunction SharedForm<\n  T extends z.ZodObject<any> | z.ZodEffects<z.ZodObject<any>>\n>({\n  schema,\n  onSubmit,\n  fieldConfigs = {},\n  submitButtonText = \"Submit\",\n  formClassName = \"flex flex-col gap-4\",\n  submitButtonClassName,\n  form,\n  showSeparator = false,\n}: UniversalFormProps<T>) {\n  const schemaShape =\n    \"shape\" in schema ? schema.shape : schema._def.schema.shape;\n\n  return (\n    <Form {...form}>\n      <form\n        id={`shared-form-${schema._def.description}`}\n        onSubmit={form?.handleSubmit(onSubmit)}\n        className={formClassName}\n      >\n        {Object.keys(schemaShape).map((fieldName, index) => {\n          const fieldSchema = schemaShape[fieldName];\n          const config = fieldConfigs[fieldName] || {};\n\n          if (!config.hidden) {\n            return renderField<typeof fieldSchema>(\n              index,\n              fieldName,\n              fieldSchema,\n              form.control,\n              fieldConfigs\n            );\n          }\n\n          return null;\n        })}\n      </form>\n      {showSeparator && <Separator />}\n      <div className='flex justify-end'>\n        <Button\n          form={`shared-form-${schema._def.description}`}\n          type='submit'\n          className={submitButtonClassName}\n        >\n          {submitButtonText}\n        </Button>\n      </div>\n    </Form>\n  );\n}\n\nexport default SharedForm;\n",
      "path": "components/forms/sharedForm/form.tsx",
      "target": "components/forms/sharedForm/form.tsx"
    },
    {
      "type": "registry:component",
      "content": "import { Button } from \"@/components/ui/button\";\nimport {\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { cn } from \"@/lib/utils\";\nimport { ImagePlus, Loader2Icon, XIcon } from \"lucide-react\";\nimport Image from \"next/image\";\nimport { useState } from \"react\";\nimport { SharedFormFieldProps } from \"../form\";\n\nfunction ImageField({\n  fieldName,\n  control,\n  config,\n  label,\n  isOptional,\n}: SharedFormFieldProps<\"image\">) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDragging, setIsDragging] = useState(false);\n\n  return (\n    <FormField\n      key={fieldName}\n      control={control}\n      rules={config.rules}\n      name={fieldName}\n      render={({ field }) => {\n        return (\n          <FormItem\n            className={cn(\"flex flex-col items-center\", config.className)}\n          >\n            <FormLabel className={cn(config.labelClassName)}>\n              {label}\n              {isOptional && (\n                <span className='ml-1 text-muted-foreground'>(Optional)</span>\n              )}\n            </FormLabel>\n            <FormControl>\n              <div className='flex border-2 border-dashed rounded-lg flex-col gap-4 relative'>\n                <div\n                  className={cn(\n                    \"group rounded-lg overflow-hidden\",\n                    \"transition-colors duration-200 ease-in-out\",\n                    isDragging\n                      ? \"border-primary bg-primary/5\"\n                      : \"border-muted-foreground/25\",\n                    \"hover:border-primary hover:bg-primary/5\",\n                    config.uploadAreaClassName\n                  )}\n                  onDragOver={(e) => {\n                    e.preventDefault();\n                    setIsDragging(true);\n                  }}\n                  onDragLeave={() => setIsDragging(false)}\n                  onDrop={(e) => {\n                    e.preventDefault();\n                    setIsDragging(false);\n                    const file = e.dataTransfer.files?.[0];\n                    if (file && file.type.startsWith(\"image/\")) {\n                      setIsLoading(true);\n                      const previewUrl = URL.createObjectURL(file);\n                      field.onChange({ file, previewUrl });\n                    }\n                  }}\n                >\n                  <Input\n                    type='file'\n                    accept='image/*'\n                    className='sr-only'\n                    onChange={(e) => {\n                      const file = e.target.files?.[0];\n                      if (file) {\n                        setIsLoading(true);\n                        const previewUrl = URL.createObjectURL(file);\n                        field.onChange({ file, previewUrl });\n                      }\n                    }}\n                    id={`${fieldName}-upload`}\n                  />\n                  <label\n                    htmlFor={`${fieldName}-upload`}\n                    className={cn(\n                      \"flex flex-col items-center justify-center gap-2\",\n                      \"cursor-pointer w-full p-4\",\n                      \"text-muted-foreground\",\n                      config.inputClassName\n                    )}\n                  >\n                    {!field.value ? (\n                      <>\n                        <ImagePlus className='w-10 h-10' />\n                        <div className='text-center'>\n                          <p className='font-medium'>Click to upload</p>\n                          <p className='text-sm'>or drag and drop</p>\n                        </div>\n                        <p className='text-xs'>PNG, JPG, GIF up to 10MB</p>\n                      </>\n                    ) : (\n                      <div className='w-40 h-40'>\n                        {isLoading && (\n                          <div className='absolute inset-0 flex items-center justify-center bg-background/50 backdrop-blur-sm z-10'>\n                            <Loader2Icon className='h-8 w-8 animate-spin text-primary' />\n                          </div>\n                        )}\n                        <Image\n                          src={field.value.previewUrl}\n                          alt='Preview'\n                          fill\n                          className='object-contain rounded-lg'\n                          onLoad={() => {\n                            setIsLoading(false);\n                            if (config.onImageLoad) {\n                              config.onImageLoad(field.value);\n                            }\n                          }}\n                        />\n                        <Button\n                          type='button'\n                          variant='destructive'\n                          size='xsIcon'\n                          className='absolute -top-1 -right-1 z-20'\n                          onClick={(e) => {\n                            e.preventDefault();\n                            if (field.value?.previewUrl) {\n                              URL.revokeObjectURL(field.value.previewUrl);\n                            }\n                            field.onChange(null);\n                          }}\n                        >\n                          <XIcon className='h-4 w-4' />\n                        </Button>\n                      </div>\n                    )}\n                  </label>\n                </div>\n              </div>\n            </FormControl>\n            {config.description && (\n              <FormDescription>{config.description}</FormDescription>\n            )}\n            <FormMessage />\n          </FormItem>\n        );\n      }}\n    />\n  );\n}\n\nexport default ImageField;\n",
      "path": "components/forms/sharedForm/components/imageField.tsx",
      "target": "components/forms/sharedForm/components/imageField.tsx"
    },
    {
      "type": "registry:component",
      "content": "import {\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { cn } from \"@/lib/utils\";\nimport React from \"react\";\nimport { z } from \"zod\";\nimport { SharedFormFieldProps } from \"../form\";\n\nfunction SelectField({\n  fieldName,\n  control,\n  config,\n  label,\n  isOptional,\n  schema,\n}: SharedFormFieldProps<\"select\">) {\n  return (\n    <FormField\n      key={fieldName}\n      control={control}\n      rules={config.rules}\n      name={fieldName}\n      render={({ field }) => (\n        <FormItem className={cn(\"flex flex-col\", config.className)}>\n          <FormLabel className={config.labelClassName}>\n            {label}\n            {isOptional && (\n              <span className='ml-1 text-muted-foreground'>(Optional)</span>\n            )}\n          </FormLabel>\n          <FormControl>\n            <Select\n              onValueChange={(e) =>\n                schema instanceof z.ZodNumber\n                  ? field.onChange(Number(e))\n                  : field.onChange(e)\n              }\n            >\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {config.options?.map((item) => (\n                  <SelectItem key={item.value} value={String(item.value)}>\n                    {item.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </FormControl>\n          {config.description && (\n            <FormDescription>{config.description}</FormDescription>\n          )}\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  );\n}\n\nexport default SelectField;\n",
      "path": "components/forms/sharedForm/components/selectField.tsx",
      "target": "components/forms/sharedForm/components/selectField.tsx"
    },
    {
      "type": "registry:component",
      "content": "import {\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { cn } from \"@/lib/utils\";\nimport { DateTimePicker } from \"@/components/dateTimePicker\";\nimport React from \"react\";\nimport { SharedFormFieldProps } from \"../form\";\n\nfunction DateField({\n  fieldName,\n  control,\n  config,\n  label,\n  isOptional,\n}: SharedFormFieldProps<\"date\" | \"datetime-local\">) {\n  return (\n    <FormField\n      key={fieldName}\n      control={control}\n      rules={config.rules}\n      name={fieldName}\n      render={({ field }) => (\n        <FormItem className={cn(\"flex flex-col\", config.className)}>\n          <FormLabel className={config.labelClassName}>\n            {label}\n            {isOptional && (\n              <span className='ml-1 text-muted-foreground'>(Optional)</span>\n            )}\n          </FormLabel>\n          <FormControl>\n            <DateTimePicker\n              cb={(date) => field.onChange(date)}\n              defaultDate={field.value}\n              disabled={{\n                date: new Date(),\n                operator: \"<=\",\n              }}\n            />\n          </FormControl>\n          {config.description && (\n            <FormDescription>{config.description}</FormDescription>\n          )}\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  );\n}\n\nexport default DateField;\n",
      "path": "components/forms/sharedForm/components/dateField.tsx",
      "target": "components/forms/sharedForm/components/dateField.tsx"
    },
    {
      "type": "registry:component",
      "content": "import {\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { cn } from \"@/lib/utils\";\nimport { SharedFormFieldProps } from \"../form\";\n\nfunction TextField({\n  config,\n  label,\n  isOptional,\n  control,\n  fieldName,\n}: SharedFormFieldProps<\"text\">) {\n  return (\n    <FormField\n      key={fieldName}\n      control={control}\n      rules={config.rules}\n      name={fieldName}\n      render={({ field }) => (\n        <FormItem className={cn(\"flex flex-col\", config.className)}>\n          <FormLabel\n            className={cn(config.labelClassName, \"flex items-center gap-2\")}\n          >\n            {label}\n            {isOptional && (\n              <span className='ml-1 text-muted-foreground'>(Optional)</span>\n            )}\n          </FormLabel>\n          <FormControl>\n            <Input\n              placeholder={config.placeholder || `Enter ${label}`}\n              {...field}\n              className={config.inputClassName}\n              type={\n                config.type === \"text\" && config.textType === \"password\"\n                  ? \"password\"\n                  : \"\"\n              }\n            />\n          </FormControl>\n          {config.description && (\n            <FormDescription>{config.description}</FormDescription>\n          )}\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  );\n}\n\nexport default TextField;\n",
      "path": "components/forms/sharedForm/components/textField.tsx",
      "target": "components/forms/sharedForm/components/textField.tsx"
    },
    {
      "type": "registry:component",
      "content": "import {\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { cn } from \"@/lib/utils\";\nimport React from \"react\";\nimport { SharedFormFieldProps } from \"../form\";\n\nfunction TextareaField({\n  config,\n  label,\n  isOptional,\n  control,\n  fieldName,\n}: SharedFormFieldProps<\"text\">) {\n  return (\n    <FormField\n      key={fieldName}\n      control={control}\n      rules={config.rules}\n      name={fieldName}\n      render={({ field }) => (\n        <FormItem className={cn(\"flex flex-col\", config.className)}>\n          <FormLabel className={config.labelClassName}>\n            {label}\n            {isOptional && (\n              <span className='ml-1 text-muted-foreground'>(Optional)</span>\n            )}\n          </FormLabel>\n          <FormControl>\n            <Textarea\n              placeholder={config.placeholder || `Enter ${label}`}\n              {...field}\n              className={config.inputClassName}\n            />\n          </FormControl>\n          {config.description && (\n            <FormDescription>{config.description}</FormDescription>\n          )}\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  );\n}\n\nexport default TextareaField;\n",
      "path": "components/forms/sharedForm/components/textareaField.tsx",
      "target": "components/forms/sharedForm/components/textareaField.tsx"
    },
    {
      "type": "registry:component",
      "content": "import {\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { cn } from \"@/lib/utils\";\nimport React from \"react\";\nimport { SharedFormFieldProps } from \"../form\";\n\nfunction NumberField({\n  config,\n  label,\n  isOptional,\n  control,\n  fieldName,\n}: SharedFormFieldProps<\"number\">) {\n  return (\n    <FormField\n      key={fieldName}\n      control={control}\n      rules={config.rules}\n      name={fieldName}\n      render={({ field }) => (\n        <FormItem className={cn(\"flex flex-col\", config.className)}>\n          <FormLabel className={config.labelClassName}>\n            {label}\n            {isOptional && (\n              <span className='ml-1 text-muted-foreground'>(Optional)</span>\n            )}\n          </FormLabel>\n          <FormControl>\n            <Input\n              {...field}\n              type='text'\n              value={field.value ?? \"\"}\n              onChange={(e) => {\n                const value = e.target.value;\n                if (value === \"\" || /^-?\\d*[.,]?\\d*$/.test(value)) {\n                  field.onChange(\n                    config.type !== \"text\" ? Number(value) : value\n                  );\n                }\n              }}\n              className={config.inputClassName}\n              placeholder={config.placeholder}\n            />\n          </FormControl>\n          {config.description && (\n            <FormDescription>{config.description}</FormDescription>\n          )}\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  );\n}\n\nexport default NumberField;\n",
      "path": "components/forms/sharedForm/components/numberField.tsx",
      "target": "components/forms/sharedForm/components/numberField.tsx"
    },
    {
      "type": "registry:component",
      "content": "import { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { cn } from \"@/lib/utils\";\nimport React from \"react\";\nimport { SharedFormFieldProps } from \"../form\";\n\nfunction BooleanField({\n  config,\n  label,\n  isOptional,\n  control,\n  fieldName,\n}: SharedFormFieldProps<\"boolean\">) {\n  return (\n    <FormField\n      key={fieldName}\n      control={control}\n      name={fieldName}\n      rules={config.rules}\n      render={({ field }) => (\n        <FormItem className={cn(\"flex flex-col\", config.className)}>\n          <div className='flex items-center gap-2'>\n            <FormControl>\n              <Checkbox\n                checked={field.value}\n                onCheckedChange={field.onChange}\n                className={config.inputClassName}\n              />\n            </FormControl>\n            <FormLabel className={config.labelClassName}>\n              {label}\n              {isOptional && (\n                <span className='ml-1 text-muted-foreground'>(Optional)</span>\n              )}\n            </FormLabel>\n          </div>\n          <div className='space-y-1 leading-none'>\n            {config.description && (\n              <FormDescription>{config.description}</FormDescription>\n            )}\n            <FormMessage />\n          </div>\n        </FormItem>\n      )}\n    />\n  );\n}\n\nexport default BooleanField;\n",
      "path": "components/forms/sharedForm/components/booleanField.tsx",
      "target": "components/forms/sharedForm/components/booleanField.tsx"
    },
    {
      "type": "registry:component",
      "content": "\"use client\";\nimport * as React from \"react\";\nimport { format } from \"date-fns\";\nimport { enUS } from \"date-fns/locale\";\nimport { Calendar as CalendarIcon } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\nexport function DateTimePicker({\n  cb,\n  defaultDate,\n  disabled = {\n    date: new Date(),\n    operator: \">\",\n  },\n}: {\n  cb: (date: Date | undefined) => void;\n  defaultDate?: Date;\n  disabled?: {\n    date: Date;\n    operator: \">\" | \"<\" | \">=\" | \"<=\";\n  };\n}) {\n  const [date, setDate] = React.useState<Date | undefined>(defaultDate);\n  const [time, setTime] = React.useState(() => {\n    if (defaultDate) {\n      return format(defaultDate, \"HH:mm\");\n    }\n    return \"00:00\";\n  });\n  const [isOpen, setIsOpen] = React.useState(false);\n  const scrollAreaRef = React.useRef<HTMLDivElement>(null);\n  const timeSlotRefs = React.useRef<(HTMLDivElement | null)[]>([]);\n\n  React.useEffect(() => {\n    if (date) {\n      const [hours, minutes] = time.split(\":\");\n      const updatedDate = new Date(date);\n      updatedDate.setHours(parseInt(hours), parseInt(minutes));\n      cb(updatedDate);\n    } else {\n      cb(undefined);\n    }\n  }, [date, time]);\n\n  const generateTimeSlots = () => {\n    const slots: string[] = [];\n    for (let i = 0; i < 96; i++) {\n      const hour = Math.floor(i / 4)\n        .toString()\n        .padStart(2, \"0\");\n      const minute = ((i % 4) * 15).toString().padStart(2, \"0\");\n      const timeValue = `${hour}:${minute}`;\n      slots.push(timeValue);\n    }\n    return slots;\n  };\n\n  return (\n    <Popover open={isOpen} onOpenChange={setIsOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant={\"outline\"}\n          className={cn(\n            \"w-full justify-start gap-2 flex text-left font-normal\",\n            !date && \"text-muted-foreground\"\n          )}\n        >\n          <CalendarIcon className='w-4 h-4' />\n          {date\n            ? `${format(date, \"PPP\", { locale: enUS })}, ${time}`\n            : \"Select a date\"}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className='flex w-auto p-0 h-fit z-[100000]'>\n        <Calendar\n          mode='single'\n          locale={enUS}\n          selected={date}\n          disabled={(d) => {\n            const isDisabled = (d: Date) => {\n              const { operator, date } = disabled;\n\n              switch (operator) {\n                case \">\":\n                  return d > date;\n                case \"<\":\n                  return d < date;\n                case \">=\":\n                  return d >= date;\n                case \"<=\":\n                  return d <= date;\n                default:\n                  return false;\n              }\n            };\n\n            return isDisabled(d);\n          }}\n          onSelect={(selectedDate) => {\n            setDate(selectedDate);\n          }}\n          initialFocus\n        />\n        <div className='border-t max-h-[20rem] p-2'>\n          <ScrollArea ref={scrollAreaRef} className='w-full h-full p-2 text-sm'>\n            <div className='flex flex-col space-y-1'>\n              {generateTimeSlots().map((timeSlot, index) => (\n                <div\n                  ref={(el) => {\n                    timeSlotRefs.current[index] = el;\n                    if (time === timeSlot && el) {\n                      el.scrollIntoView({\n                        behavior: \"smooth\",\n                        block: \"nearest\",\n                      });\n                    }\n                  }}\n                  key={timeSlot}\n                  className={cn(\n                    \"px-2 py-1 rounded-sm cursor-pointer hover:bg-accent hover:text-accent-foreground\",\n                    time === timeSlot && \"bg-primary text-primary-foreground\"\n                  )}\n                  onClick={() => {\n                    setTime(timeSlot);\n                  }}\n                >\n                  {timeSlot}\n                </div>\n              ))}\n            </div>\n          </ScrollArea>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "path": "components/dateTimePicker.tsx",
      "target": "components/dateTimePicker.tsx"
    },
    {
      "type": "registry:component",
      "content": "import { z } from \"zod\";\n\ntype ZodTypeWithRefine = z.ZodObject<any> | z.ZodEffects<z.ZodObject<any>>;\n\nexport interface BaseConfig<T = any> {\n  label?: string;\n  placeholder?: string;\n  description?: string;\n  className?: string;\n  inputClassName?: string;\n  labelClassName?: string;\n  optional?: boolean;\n  hidden?: boolean;\n  default?: any;\n  onImageLoad?: (value: { file: File; previewUrl: string }) => void;\n  previewClassName?: string;\n  uploadAreaClassName?: string;\n  metadata?: T;\n  rules?: {\n    required?: {\n      value: boolean;\n      message: string;\n    };\n  };\n}\n\nexport type TextConfig = BaseConfig & {\n  type?: \"text\";\n  textType?: \"small\" | \"huge\" | \"number\" | \"password\";\n};\n\nexport type NumberConfig = BaseConfig & {\n  type?: \"number\";\n};\n\nexport type DateConfig = BaseConfig & {\n  type?: \"date\" | \"datetime-local\";\n};\n\nexport type SelectConfig = BaseConfig & {\n  type?: \"select\";\n  options?: { value: string | number; label: string }[];\n};\n\nexport type ImageConfig = BaseConfig & {\n  type?: \"image\";\n  onImageLoad?: (value: { file: File; previewUrl: string }) => void;\n  previewClassName?: string;\n  uploadAreaClassName?: string;\n};\n\nexport type FieldConfig =\n  | TextConfig\n  | NumberConfig\n  | DateConfig\n  | SelectConfig\n  | ImageConfig;\n\nexport function createFieldConfigs<T extends ZodTypeWithRefine>(\n  schema: T,\n  configs: {\n    [K in keyof z.infer<T>]?: FieldConfig;\n  }\n) {\n  return configs;\n}\n",
      "path": "lib/schemaConfigs.ts",
      "target": "lib/schemaConfigs.ts"
    },
    {
      "type": "registry:component",
      "content": "export const magicRename = (string: string) => {\n  const normalizedString = string\n    .replace(/([a-z0-9])([A-Z])/g, \"$1_$2\")\n    .toLowerCase();\n\n  return normalizedString\n    .split(\"_\")\n    .map((word, index) =>\n      index === 0 ? word.charAt(0).toUpperCase() + word.slice(1) : word\n    )\n    .join(\" \");\n};\n\nexport const generateRandomId = (): string => {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n};\n",
      "path": "lib/sharedFormUtils.ts",
      "target": "lib/sharedFormUtils.ts"
    }
  ]
}